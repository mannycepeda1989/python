Glossary terms from course 1, module 3
Terms and definitions from Course 1, Module 3
Break: A way to exit out of a loop before the loop's condition is false

Control statements: Programming constructs that direct the flow of execution of a program by allowing you to make decisions, repeat actions, or choose between different code paths based on specific conditions.

For loop: This executes a block of code for a specified number of iterations or over a collection of items.

Infinite loop: A sequence that is missing a method for exiting the loop, causing the loop to run forever

Iterators: Variables that allow you to loop through a collection one item at a time

Loop: A sequence that makes the computer do repetitive tasks 

Programming: The process of writing a program to behave in different ways 

Pass: A placeholder statement which is used when the syntax requires a statement, but you don't want to execute any code or command

Recursion: The repeated application of the same procedure to a smaller problem

While loop: This is used when a segment of code needs to execute repeatedly while a condition is true

Knowledge
Terms
variables - Know how to properly initialize or increment a variable. You will also need to recognize a coding error due to the failure to properly initialize or increment a variable.

infinite loops - Know how to recognize infinite loops and use common solutions to prevent them. For example, check loop conditions, ranges, iterators, control statements, etc. to ensure that at least one of these controls are in place to prevent an infinite loop.

iterators - Know the various options available for iterating a variable (e.g., using assignment operators, using the third range() function parameter). You will also need to analyze where the iteration should occur. A misplaced iterator could produce the wrong output or create an infinite loop.  

control statements - Know how and when to use the break and continue control statements to prevent infinite loops.  


Common Functions
range() Function Parameters - Know the roles of the three possible range(x, y, z) function parameters:

x Start of Range (included)

y End of Range (excluded index) 

To include the end of range index, use the expression y+1

The end of range must be included in the range() parameters.

z Incremental value

Example 1: range(4, 12+1, 2)

This example creates a range that starts at 4 and ends at 12 (without the +1, the range would end at 11). 

The third parameter increments the range iteration by 2, as opposed to the default increment of 1. The  range(4, 12+1, 2) expression would produce the values: 4, 6, 8, 10, 12 

Example 2: range(10, 2-1, -2)

This example creates a range that starts at 10 and ends at 2-1, with a decremental value of -2. When counting down, to include the value of the end of the range index, use -1 (end of range minus 1). This range produces the sequence: 10, 8, 6, 4, 2 


print() Function Default Behavior - Know the default behavior of the print() function is to insert a new line character after the print statement runs.

To override the insertion of the new line character and replace it with a space, add end=" " as the last item in the print() parameters. This makes it possible to add the next print output to the same line, separated by a space. You might use this technique when a print() function is part of a for or while loop. Example syntax:  print(x+1, end=" ")

Reminder: Correct syntax is critical
Using precise syntax is critical when writing code in any programming language, including Python. Even a small typo can cause a syntax error and the automated Python-coded quiz grader will mark your code as incorrect. This reflects real life coding errors in the sense that a single error in spelling, case, punctuation, etc. can cause your code to fail. Coding problems caused by imprecise syntax will always be an issue whether you are learning a programming language or you are using programming skills on the job. So, it is critical to start the habit of being precise in your code now. 

No credit will be given if there are any coding errors on the automated graded quizzes - including minor errors. Fortunately, you have 3 optional retake opportunities on the graded quizzes in this course. Additionally, you have unlimited retakes on practice quizzes and can review the videos and readings as many times as you need to master the concepts in this course.  

Now, before starting the graded quiz, please review this list of common syntax errors coders make when writing code.

Common syntax errors:
Misspellings

Incorrect indentations

Missing or incorrect key characters:

Parenthetical types - ( curved ), [ square ], { curly }

Quote types - "straight-double" or 'straight-single', “curly-double” or ‘curly-single’

Block introduction characters, like colons - :

Data type mismatches

Missing, incorrectly used, or misplaced Python reserved words

Using the wrong case (uppercase/lowercase) - Python is a case-sensitive language 

Resources
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket


