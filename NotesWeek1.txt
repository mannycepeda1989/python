Key Terms
Programming code - Programming code is a set of written computer instructions, guided by rules, using a computer programming language. It might help to think of the computer instructions as a detailed, step-by-step recipe for performing tasks. The instructions tell computers and machines how to perform an action. Programming code may also be referred to as source code or scripts.

Programming languages - Programming languages are similar to human spoken languages in that they both use syntax and semantics. Programming languages are used to write computer programs.  Some common programming languages include Python, Java, C, C++, C#, and R.

Syntax - Syntax is a set of rules for how statements are constructed in both human and computer languages. Programming syntax includes rules for the order of elements in programming instructions, as well as the use of special characters and their placements in statements. This concept is similar to the syntax rules for grammar and punctuation in human language.

Semantics - Semantics refers to the intended meaning or effect of statements, or collections of words, in both human and computer languages. Semantic errors are also referred to as logical errors.

Computer program - A computer program is a step-by-step list of instructions that a computer follows to reach an intended goal. It is important to be clear and precise about the actions a computer program is supposed to perform because computers will do exactly what they are instructed to do. Computer programs can be long, complex, and accomplish a variety of tasks. They are often developed by computer programmers and software engineers, but anyone can learn to create them. Computer programs may involve a structured development cycle. They can be written in a wide variety of programming languages, such as Python, Java, C++,  R, and more. The completed format of a program is often a single executable file.

Script - Scripts are usually shorter and less complex than computer programs. Scripts are often used to automate specific tasks. However, they can be used for complex tasks if needed. Scripts are often written by IT professionals, but anyone can learn to write scripts. Scripts have a shorter, less structured development cycle as compared to the development of complex computer programs and software. Scripts can be written in a variety of programming languages, like Python, Javascript, Ruby, Bash, and more. Some scripting languages are interpreted languages and are only compatible with certain platforms.

Automation - Automation is used to replace a repetitive manual step with one that happens automatically. 

Output - Output is the end result of a task performed by a function or computer program. Output can include a single value, a report, entries into a database, and more. 

Input - Input is information that is provided to a program by the end user. Input can be text, voice, images, biometrics, and more.   

Functions - A function is a reusable block of code that performs a specific task.

Variables - Variables are used to temporarily store changeable values in programming code. 

A Note on Syntax and Code Blocks
When writing code, using correct syntax is critical. Even a small typo, like a missing parenthesis bracket or an extra comma, can cause a syntax error and the code won't execute at all. If your code results in an error or an exception, pay close attention to syntax and watch out for minor mistakes. A single wrong character could take hours to identify in long code so it is important to be mindful of syntax when writing code. 

Common syntax errors:
Misspellings

Incorrect indentations

Missing or incorrect key characters:

Bracket types - ( curved ), [ square ], { curly }

Quote types - "straight-double" or 'straight-single', “curly-double” or ‘curly-single’

Block introduction characters, like colons - :

Data type mismatches

Missing, incorrectly used, or misplaced Python reserved words

Using the wrong case (uppercase/lowercase) - Python is a case-sensitive language 

If your syntax is correct, but the script has unexpected behavior or output, this may be due to a semantic problem. Syntax is like the vocabulary, grammar, spelling, and punctuation of code. Semantics are the meaning and logic of coded statements. It is possible to have syntactically correct code that runs successfully, but doesn't do what we want it to do.

Common semantic errors:
Creating functional code, but getting unintentional output

Poor logic structures in the design of the code

When working with the code blocks in exercises for this course, be mindful of syntax and semantic (logic) errors, along with the overall result of your code. Just because you fixed an error doesn't mean that the code will have the desired effect when it runs! Once you’ve fixed an error in your code, don't forget to click Run to check your work.

 Study Guide: Introduction to Python
This study guide provides a quick-reference summary of what you learned in this lesson and serves as a guide for the upcoming practice quiz.  

In this segment, you learned that Python is a general purpose programming language that is commonly used for scripting and automation, as well as to develop a wide variety of applications. Python is compatible with most operating systems, including Windows, Linux, and Mac OS, and is updated every few years. Python can also run on a variety of machines, such as servers, workstations, PCs, mobile devices, IoT, and more.

Python is widely used in the IT field, including IT support, system administration, web development, machine learning, data analytics, and more. Python can be used to calculate statistics, run your e-commerce site, process images, interact with web services, and do a whole host of other tasks. Python instructions resemble the English language, which is what makes it easier to learn and understand when compared to other programming languages.

Python is:

a general purpose scripting language;

a popular language used to code a variety of applications;

a frequently used tool for automation;

a cross-platform compatible language;

a beginner-friendly language.

Python is not: 

a platform-specific / OS-specific scripting language;

a client-side scripting language;

a purely object-oriented programming language.


Code comparison with Python
You will be learning about both Python and Bash scripting in this program. The following code illustrates a syntax difference between the two languages:

 Print to screen in Python  

 Print to screen in Bash  

>> print("Hello, how are you?")

Hello, how are you?

>> echo Hello, how are you?

Hello, how are you?


  Key Terms
Platform-specific / OS specific scripting language - Platform-specific scripting languages, like PowerShell (for Windows) and Bash (for Linux), are used by system administrators on those platforms. 

Client-side scripting language - Client-side scripting languages, like JavaScript, are used mostly for web programming. The scripts are transferred from a web server to the end-user’s internet browser, then executed in the browser.

Machine language - Machine language is the lowest-level computer language. It communicates directly with computing machines in binary code (ones and zeros). In binary code, one equals a pulse of electricity and zero equals no electrical pulse. Machine language instructions are made from translating languages like Python into complex patterns of ones and zeros. 

Cross-platform language - Programming language that is compatible with one or more platforms / operating systems (e.g., Windows, Linux, Mac, iOS, Android).

Object-oriented programming language - In object-oriented programming languages, most coding elements are considered to be objects with configurable properties. For example, a form field is an object that can be configured to accept only dates as input in the mm/dd/yy format, and can be configured to read from and write to a specific database. 

Python interpreter - An interpreter is the program that reads and executes Python code by translating Python code into computer instructions.

Resources
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket

 Study Guide: First Programming Concepts
This study guide provides a quick-reference summary of what you learned in this lesson and serves as a guide for the upcoming practice quiz.  

Functions 
A function is a piece of code that performs a unit of work. In the examples you've seen so far, you have only encountered the print() function, which outputs a message to the screen. You will use this function frequently in this course to check the results of your code. The syntax of the print() function is modeled in the example below. 

123
# Syntax for printing a string of text. Click Run to check the result.

print("Hello world!")
Reset
Hello world!
Keywords
A keyword is a reserved word in a programming language that performs a specific purpose. In your first Python example, you briefly encountered the keywords for and in.  Note that keywords will often appear in bold in this course. 

In the next few weeks, you will also learn the following keywords:

Values: True, False, None
Conditions: if, elif, else
Logical operators: and, or, not
Loops: for, in, while, break, continue
Functions: def, return  

You don't need to learn this whole list now. We'll dive into each keyword as we encounter them. There are additional reserved keywords in Python. If you would like to read about them, please visit the linked “Python Keywords” article in the Resources section at the end of this study guide. 

Arithmetic operators
Python can calculate numbers using common mathematical operators, along with some special operators, too:  

x + y            Addition + operator returns the sum of x plus y
x - y             Subtraction - operator returns the difference of x minus y
x * y            Multiplication * operator returns the product of x times y
x / y             Division / operator returns the quotient of x divided by y
x**y            Exponent ** operator returns the result of raising x to the power of y 
x**2            Square expression returns x squared
x**3            Cube expression returns x cubed
x**(1/2)    Square root (½) or (0.5) fractional exponent operator returns the square root of x
x // y           Floor division operator returns the integer part of the integer division of x by y
x % y          Modulo operator returns the remainder part of the integer division of x by y

Order of operations
The order of operations are to be calculated from left to right in the following order: 

Parentheses ( ), { }, [ ]

Exponents xy   (x**y)

Multiplication * and Division /  

Addition + and Subtraction -    

 You might find the PEMDAS mnemonic device to be helpful in remembering the order.   

Review: Use the command-line
The command-line is used to tell your computer what to do. You can use it to access servers, move files, change directories, and write scripts. In this reading, you will learn how to write Python scripts at the command-line along with the Python GUI IDLE. We will also cover the different ways you can access the command-line based on your operating system. 


Using the command line on MacOS
Using the spotlight search, type in “terminal.” Select the terminal application. You should see your username followed by the $ sign. MacOS comes with Python 2.7 pre-installed. You can install Python 3 from 
python.org
. Just remember, this means that you will have 2 versions of Python installed on your Mac, and you will need to pay special attention to your paths.

To check which version of Python you have installed on your Mac, use the following command.

python --version

To check for Python3, use the following command. 

python3 --version


Using the command line on Windows OS
In Windows, open the start menu. In the search box type cmd. Right-click on cmd and select Run as administrator. This will open up the command-line. Windows OS does not come with Python installed. Visit the official Python 
download page
 for Windows. Select the Windows installer (64-bit) or (32-bit). After the installer is downloaded, double–click the file. Select Install launcher for all users. Follow the prompts during installation. Make sure to select the Add python.exe PATH checkbox. This will allow you to launch Python from the command line. Once installation is complete, you can check for Python from the command line.

To check for Python, use the following command. The version of Python you installed will appear. 

python --version


Using the command line on Linux OS
Access the Linux terminal using Ctrl + Alt + T. This will allow you to check for Python. Type python. Python comes preinstalled on most Linux systems. If the command is not found, you can install Python by writing sudo apt install python3. 

You can begin writing Python code from the terminal. Simply type python to use the interactive mode. You can also write Python scripts using Linux with IDLE which we will cover next. 


Using IDLE
Python IDLE is included with Python installations on Windows and MacOS. You can download IDLE using your package manager on Linux. Python IDLE is an interactive interpreter or file editor that allows you to easily write Python scripts and programs. IDLE provides syntax highlighting, code completion, and automatic indentation. 

Double click on the IDLE icon to open it on your computer. This will open a blank Python interpreter window. You can begin writing code right away. 

Image of the IDLE Shell with print("Hello, world!") and Hello, world! as the output
You can also open a new file. Go to File → Open → New File from the menu bar. Here you can write a Python file. Once you have completed writing your Python code in the file, go to File → Save As. Give your Python file a name. Hit Save. To run the Python code in the file you saved click Run → Run Module from the menu.


Sum.py
 File
Image of a code file titled sum.py that takes 2 variables and assigns a numerical value to them, adds them, and prints them

Sum.py
 Output
Image shows the output of sum.py which is The sum of the numbers is: 3

Key takeaways
Whichever operating system you are using, you will be able to run Python from the command-line.  Using a text editor like IDLE and running python from the command-line  is best for executing and debugging individual scripts or .py files. 
